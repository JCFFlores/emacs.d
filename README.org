#+TITLE: JCFFlores Emacs literate Configuration
#+AUTHOR: Jos√© Flores
#+PROPERTY: header-args :tangle yes
#+PROPERTY: header-args:emacs-lisp :lexical t
* Table of contents :TOC_3_gh:
- [[#introduction-to-awesome-jcfflores-emacs-configuration][Introduction to awesome JCFFlores Emacs configuration]]
- [[#initial-setup][Initial setup]]
  - [[#package-configuration][Package configuration]]
    - [[#require-packageel-before-continuing][Require package.el before continuing]]
    - [[#add-archives][Add archives]]
  - [[#custom-configuration][Custom configuration]]
  - [[#use-package-installation][Use-package installation]]
    - [[#conditionally-install-use-package][Conditionally install use-package]]
    - [[#require-use-package][Require use-package]]
  - [[#require-packages][Require packages]]
  - [[#literate-configuration-file][Literate configuration file]]
- [[#general-configuration][General configuration]]
  - [[#spellcheck-configuration][Spellcheck configuration]]
    - [[#flyspell-configuration][Flyspell configuration]]
    - [[#languages-configuration][Languages configuration]]
- [[#language-server-protocol-configuration][Language server protocol configuration]]
  - [[#lsp-mode-configuration][lsp-mode configuration]]
  - [[#lsp-ui-configuration][lsp-ui configuration]]
  - [[#ivy-integration][Ivy integration]]
- [[#web-configuration][Web configuration]]
  - [[#web-mode-configuration][web-mode configuration]]
  - [[#js2-mode-configuration][js2-mode configuration]]
  - [[#json-mode-configuration][json-mode configuration]]
- [[#package-configurations][Package configurations]]
  - [[#markdown-configuration][Markdown configuration]]
  - [[#rainbow-delimiters][Rainbow delimiters]]
  - [[#dired-configuration][Dired configuration]]
    - [[#all-the-icons-in-dired][All the icons in dired]]
  - [[#magit-configuration][Magit configuration]]
  - [[#git-timemachine][Git timemachine]]
  - [[#fish-configuration][Fish configuration]]
  - [[#org-configuration][Org configuration]]
    - [[#org-mode-configuration][Org mode configuration]]
    - [[#org-journal-configuration][Org journal configuration]]
    - [[#toc-org-configuration][Toc-org configuration]]
  - [[#ivy-configuration][Ivy configuration]]
    - [[#counsel-configuration][Counsel configuration]]
    - [[#all-the-icons-ivy-rich][All the icons ivy-rich]]
    - [[#ivy-rich-configuration][Ivy-rich configuration]]
    - [[#ivy-prescient-configuration][Ivy-prescient configuration]]
    - [[#swiper-configuration][Swiper configuration]]
  - [[#multiple-cursors-configuration][Multiple cursors configuration]]
  - [[#flycheck-configuration][Flycheck configuration]]
  - [[#which-key-configuration][Which-key configuration]]
  - [[#company-configuration][Company configuration]]
    - [[#company-package][Company package]]
    - [[#company-prescient][Company-prescient]]
  - [[#projectile-configuration][Projectile configuration]]
  - [[#pipenv-configuration][Pipenv configuration]]
  - [[#ranger-configuration][Ranger configuration]]
  - [[#yaml-configuration][Yaml configuration]]
  - [[#docker-file-configuration][Docker file configuration]]
  - [[#bazel-configuration][Bazel configuration]]
- [[#programming-languages][Programming languages]]
  - [[#haskell-configuration][Haskell configuration]]
  - [[#rust-configuration][Rust configuration]]
  - [[#lisp-editing-configuration][Lisp editing configuration]]
    - [[#paredit-configuration][Paredit configuration]]
    - [[#racket-configuration][Racket configuration]]
  - [[#cmake-configuration][CMake configuration]]
- [[#usability-configuration][Usability configuration]]
  - [[#clear-screen][Clear screen]]
  - [[#avy-configuration][Avy configuration]]
  - [[#ace-window-configuration][Ace-window configuration]]
  - [[#mwim-configuration][Mwim configuration]]
  - [[#dwim-configurations][Dwim configurations]]
  - [[#add-line-numbers][Add line numbers]]
  - [[#delete-selection][Delete selection]]
  - [[#blinking-cursor][Blinking cursor]]
  - [[#parenthesis-matching][Parenthesis matching]]
  - [[#mac-usability][Mac usability]]
  - [[#font-configuration][Font configuration]]
    - [[#safe-set-font][Safe set font]]
    - [[#set-font][Set font]]
  - [[#backup-configuration][Backup configuration]]
  - [[#miscellaneous-configuration][Miscellaneous configuration]]
    - [[#symlinks-configuration][Symlinks configuration]]
    - [[#column-size][Column size]]
    - [[#limit-vc][Limit VC]]
    - [[#enable-auto-fill-mode][Enable auto-fill-mode]]
    - [[#enable-auto-revert-mode][Enable auto-revert-mode]]
  - [[#restart-emacs-configuration][Restart-emacs configuration]]
  - [[#theme-configuration][Theme configuration]]
- [[#utility-functions][Utility functions]]
  - [[#reload-configuration][Reload configuration]]
  - [[#open-configuration][Open configuration]]
  - [[#read-data-file][Read data file]]
- [[#vanity-configuration][Vanity configuration]]
  - [[#mail-configuration][Mail configuration]]
    - [[#mu4e-configuration][mu4e configuration]]
    - [[#smtp-configuration][smtp configuration]]
  - [[#elfeed-configuration][Elfeed configuration]]
  - [[#ledger-configuration][Ledger configuration]]

* Introduction to awesome JCFFlores Emacs configuration
The purpose of this emacs config file is to learn more about emacs lisp
and the internals of emacs, as well as to leverage the opportunity to toy
a little bit with literate programming.
* Initial setup
** Package configuration
*** Require package.el before continuing
#+begin_src emacs-lisp
  (require 'package)
#+end_src
*** Add archives
The melpa archive is required to install most packages.
The nongnu archive is required for install ~org-contrib~.
#+begin_src emacs-lisp
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
#+end_src
** Custom configuration
Set the custom-file variable, check if the custom file already exists
and then load it. This should prevent errors when running this config
for the first time.
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src
** Use-package installation
~use-package~ is used throughout the config to lazily load and configure
packages, as well as to ensure they are always installed.
*** Conditionally install use-package
The rest of the configuration will not work if ~use-package~ is not available,
the next piece of code ensures it's present.
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src
*** Require use-package
~use-package~ is used to manage package loading and bootstrap the config. It's
used extensively throughout the config, require it.
#+begin_src emacs-lisp
  (require 'use-package)
#+end_src
** Require packages
This section is for packages that for some reason can't/won't be configured by
using ~use-package~.
#+begin_src emacs-lisp
  (require 'subr-x)
  (require 'rx)
#+end_src
** Literate configuration file
Add location of this file to a variable to avoid repeating throughout the configuration.
#+begin_src emacs-lisp
  (defvar literate-config-file (expand-file-name "README.org" user-emacs-directory)
    "Expanded name of the literate configuration file.")
#+end_src
* General configuration
This is configuration that is not specific to a package
or is not big enough to merit its own headline at the
top level of the file.
** Spellcheck configuration
*** Flyspell configuration
For all text based modes have flyspell running.
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook #'flyspell-mode)
#+end_src
For all programming modes having flyspell running would
cause a lot of visual clutter, this makes it only check
comments in code.
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'flyspell-prog-mode)
#+end_src
*** Languages configuration
#+begin_src emacs-lisp
  (defun cycle-ispell-languages ()
    "Cycle through the available languages for Ispell dictionaries."
    (interactive)
    (defvar
      user-ispell-languages-ring
      (let* ((user-ispell-languages (list "spanish" "english"))
	     (ring (make-ring (length user-ispell-languages))))
	(dolist (language user-ispell-languages) (ring-insert ring language))
	ring)
      "Languages used to cycle over in cycle-ispell-languages command.")
    (let* ((language (ring-ref user-ispell-languages-ring -1)))
      (ring-insert user-ispell-languages-ring language)
      (ispell-change-dictionary language)))
#+end_src
Bind ~cycle-ispell-languages~ to a key.
#+begin_src emacs-lisp
  (global-set-key (kbd "<f6>") #'cycle-ispell-languages)
#+end_src
* Language server protocol configuration
** lsp-mode configuration
Enable lsp-mode and ensure it's installed. To improve the performance of ~lsp~
increase the amount of bytes to read from a process.
#+begin_src emacs-lisp
  (use-package lsp-mode
    :config
    (setq read-process-output-max (* 1024 1024))
    :ensure t
    :hook
    ((lsp-mode . lsp-enable-which-key-integration)
     ((python-mode rustic-mode) . lsp))
    :commands lsp)
#+end_src
** lsp-ui configuration
Enable lsp-ui and ensure it's installed
#+begin_src emacs-lisp
  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)
#+end_src
** Ivy integration
Add integration with ivy for lsp-mode
#+begin_src emacs-lisp
  (use-package lsp-ivy
    :ensure t
    :commands lsp-ivy-workspace-symbol)
#+end_src
* Web configuration
** web-mode configuration
Ensure web-mode is installed and enable it for html files.
#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :mode (rx ".htm" (opt "l") string-end))
#+end_src
** js2-mode configuration
Ensure js2-mode is installed and enable it for javascript files.
#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode (rx ".js" string-end))
#+end_src
** json-mode configuration
Ensure ~json-mode~ is installed, lazy load it for json files.
#+begin_src emacs-lisp
  (use-package json-mode
    :ensure t
    :mode (rx ".json" string-end))
#+end_src
* Package configurations
** Markdown configuration
The only reason to have markdown configured is because it's more widespread
than org-mode for markup.
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode
    (((rx "README.md" string-end) . gfm-mode)
     ((rx ".md" string-end) . markdown-mode)
     ((rx ".markdown" string-end) . markdown-mode))
    :config
    (setq markdown-command "pandoc"))
#+end_src
** Rainbow delimiters
Add rainbow-delimiters and enable it for every programming related mode
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Dired configuration
*** All the icons in dired
Give dired some eye-candy by having icons next to file names.
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src
** Magit configuration
Magit is the one true way of interfacing with git. Lazily load
magit when pressing ~C-x g~.
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :commands (magit-init magit-clone)
    :bind (("C-x g" . magit-status)))
#+end_src
** Git timemachine
Ensure ~git-timemachine~ is available and autoload for ~git-timemachine~
command.
#+begin_src emacs-lisp
  (use-package git-timemachine
    :ensure t
    :commands git-timemachine)
#+end_src
** Fish configuration
Enable fish-mode and load it for .fish files.
#+begin_src emacs-lisp
  (use-package fish-mode
    :ensure t
    :mode (rx ".fish" string-end))
#+end_src
** Org configuration
*** Org mode configuration
Require the org package and make a binding for org-agenda to be callable,
also make a binding for ~org-capture~ and ~org-store-link~.
Ensure that .org files will be opened with org-mode. Set the location of
the agenda files to the value of the environment variable ~ORG_AGENDA~.
Set ~TODO~ and ~IN-PROGRESS~ as states, and ~DONE~, ~CANCELED~ and ~MISSED~
as the completed states for an agenda item; also give color to ~CANCELED~
and ~MISSED~ state.
Make the agenda buffer cover 14 days and make it start on the current day.
Enable ~org-crypt~ if the environment variable ~KEY_MAIL~ is set. This variable
is supposed to hold the email associated with a gpg key.
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :pin gnu
    :bind (("C-c a" . org-agenda)
	   ("C-c c" . org-capture)
	   ("C-c l" . org-store-link))
    :mode (((rx ".org" string-end) . org-mode))
    :config
    (setq org-agenda-span 14
	  org-agenda-start-on-weekday nil
	  org-adapt-indentation nil
	  org-log-done 'time
	  org-todo-keywords '((sequence
			       "TODO(t)"
			       "IN-PROGRESS(i)"
			       "|"
			       "DONE(d)"
			       "CANCELED(c)"
			       "MISSED(m)"
			       "SKIPPED(s)"))
	  org-todo-keyword-faces '(("CANCELED" . "magenta")
				   ("MISSED" . "red")
				   ("SKIPPED" . "orange")))
    (when-let* ((agenda-directory (getenv "ORG_AGENDA")))
      (setq org-default-notes-file (expand-file-name "notes.org" agenda-directory))
      (setq org-agenda-files (directory-files-recursively agenda-directory (rx ".org" string-end))))
    (when-let* ((mail (getenv "KEY_MAIL")))
      (require 'org-crypt)
      (org-crypt-use-before-save-magic)
      (setq org-tags-exclude-from-inheritance (quote ("crypt"))
	    org-crypt-key mail
	    auto-save-default nil))
    (require 'org-habit))
#+end_src
*** Org journal configuration
Ensure org-journal is installed but only set it to be configured if the
environment variables ~ORG_JOURNAL~ and ~KEY_MAIL~ are set, we are only
interested in configuring this package if we have a journal folder and we can
encrypt it. Bind "C-c C-j" to new entry creation.
#+begin_src emacs-lisp
  (use-package org-journal
    :ensure t
    :if (and (getenv "ORG_JOURNAL") (getenv "KEY_MAIL"))
    :config
    (setq org-journal-dir (getenv "ORG_JOURNAL")
	  org-journal-enable-encryption t)
    :bind (("C-c C-j" . org-journal-new-entry)))
#+end_src
*** Toc-org configuration
Ensure toc-org package is installed and enable it for .org files. This package
automatically creates table of contents in org files where a ~TOC~ tag is placed.
#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :hook (org-mode . toc-org-mode))
#+end_src
** Ivy configuration
*** Counsel configuration
Require the counsel package and enable both counsel and ivy, the
latter comes bundled with counsel. For all searches performed with ivy enable
fuzzy matching.
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :config
    (ivy-mode 1)
    (counsel-mode 1))
#+end_src
*** All the icons ivy-rich
Ensure ~all-the-icons-ivy-rich~ is installed and enable it.
#+begin_src emacs-lisp
  (use-package all-the-icons-ivy-rich
    :ensure t
    :after counsel
    :config
    (all-the-icons-ivy-rich-mode 1))
#+end_src
*** Ivy-rich configuration
Ensure ~ivy-rich~ mode is installed and enable it.
#+begin_src emacs-lisp
  (use-package ivy-rich
    :ensure t
    :after all-the-icons-ivy-rich
    :config
    (setq ivy-rich-path-style 'abbrev)
    (ivy-rich-mode 1)
    (setcdr (assq t ivy-format-functions-alist)
	    #'ivy-format-function-line))
#+end_src
*** Ivy-prescient configuration
Use prescient for suggestions in ivy buffers.
#+begin_src emacs-lisp
  (use-package ivy-prescient
    :ensure t
    :after counsel
    :config
    (ivy-prescient-mode 1)
    (prescient-persist-mode 1))
#+end_src
*** Swiper configuration
Use swiper as a superior alternative to I-search. Bind it to
~C-s~ to use it every time a search is performed in a buffer.
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :bind (("\C-s" . swiper)
	   ("\C-r" . swiper-backward)))
#+end_src
** Multiple cursors configuration
Include the ~multiple-cursors~ package and add a key-binding for ~mc/edit-lines~
to ~C-c m c~ as a mnemonic for /multiple cursors/.
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind
    (("C-c m c" . mc/edit-lines)
     ("C->" . mc/mark-next-like-this)
     ("C-<" . mc/mark-previous-like-this)
     ("C-c C-<" . mc/mark-all-like-this)))
#+end_src
** Flycheck configuration
Add flycheck package
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :hook (prog-mode . flycheck-mode)
    :config
    (setq flycheck-display-errors-delay 0.3))
#+end_src
** Which-key configuration
Add which-key package
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode 1)
    (setq which-key-idle-delay 0.1))
#+end_src
** Company configuration
*** Company package
Configure company-mode. The main purpose of having this mode is for the CAPF
back-end to be used with lsp-mode.
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :hook ((prog-mode text-mode) . company-mode)
    :config
    (setq company-minimum-prefix-length 1
	  company-idle-delay 0.0))
#+end_src
*** Company-prescient
#+begin_src emacs-lisp
  (use-package company-prescient
    :after company
    :ensure t
    :config
    (company-prescient-mode 1)
    (prescient-persist-mode 1))
#+end_src
** Projectile configuration
Ensure projectile is installed and bind its keymap to ~C-c p~
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :bind-keymap
    (("C-c p" . projectile-command-map)))
#+end_src
** Pipenv configuration
Ensure ~pipenv.el~ is installed. Bind ~pipenv-activate~ to ~C-c C-p a~ with
the purpose of setting virtualenv before starting editing a project using pyls.
#+begin_src emacs-lisp
  (use-package pipenv
    :ensure t
    :commands pipenv-activate)
#+end_src
** Ranger configuration
Ensure ranger is installed and bind it to ~C-x C-d~.
#+begin_src emacs-lisp
  (use-package ranger
    :ensure t
    :bind (("C-x C-d" . ranger))
    :config
    (setq ranger-show-literal nil
	  ranger-excluded-extensions (list "mp4" "mkv" "gp3" "ogv" "iso" "mp3")))
#+end_src
** Yaml configuration
Add Yaml mode as it's necessary to modify yaml files in kubernetes
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode ((rx ".yaml" string-end) . yaml-mode))
#+end_src
** Docker file configuration
Add docker file mode to be able to easily read and edit dockerfiles
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :mode (((rx "Dockerfile" string-end) . dockerfile-mode)))
#+end_src
** Bazel configuration
Add support for Bazel
#+begin_src emacs-lisp
  (use-package bazel
    :ensure t
    :mode (((rx ".bzl" string-end) . bazel-mode)
	   ((rx ".bazel" string-end) . bazel-mode)))
#+end_src
* Programming languages
** Haskell configuration
Ensure ~haskell-mode~ is installed and lazy load for ~.hs~ files. Enable buffer
stylizing on save.
#+begin_src emacs-lisp
  (use-package haskell-mode
    :ensure t
    :config
    (setq haskell-stylish-on-save t)
    :mode (rx ".hs" string-end))
#+end_src
** Rust configuration
Ensure ~rustic-mode~ is available for files ending with ~.rs~.
#+begin_src emacs-lisp
  (use-package rustic
    :ensure t
    :mode ((rx ".rs" string-end) . rustic-mode))
#+end_src
** Lisp editing configuration
*** Paredit configuration
Ensure paredit is installed and enable it for lisp related modes.
#+begin_src emacs-lisp
  (use-package paredit
    :ensure t
    :hook ((racket-mode lisp-data-mode scheme-mode) . paredit-mode))
#+end_src
*** Racket configuration
Ensure ~racket-mode~ is installed and autoload it for .rkt files.
#+begin_src emacs-lisp
  (use-package racket-mode
    :ensure t
    :mode (rx ".rkt" string-end))
#+end_src
** CMake configuration
#+begin_src emacs-lisp
  (use-package cmake-mode
    :ensure t
    :mode ((rx "CMakeLists.txt" string-end) . cmake-mode))
#+end_src
* Usability configuration
** Clear screen
Remove menu bar, tool bar and scroll bar to have a clearer editing screen.
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (toggle-scroll-bar -1)
#+end_src
** Avy configuration
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind (("M-s" . avy-goto-word-1)))
#+end_src
** Ace-window configuration
Bind ~ace-window~ to ~C-x o~ and use it instead of ~other-window~ command.
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    :bind (("C-x o" . ace-window)))
#+end_src
** Mwim configuration
Ensure ~mwim~ package is installed. Bind its commands to move to the end and
beginning of line, as well as the ~mwim~ command to ~C-<tab>~ to switch between
positions in the line.
#+begin_src emacs-lisp
  (use-package mwim
    :ensure t
    :bind (("C-a" . mwim-beginning)
	   ("C-e" . mwim-end)
	   ("C-<tab>" . mwim)))
#+end_src
** Dwim configurations
Some commands offer a Do-What-I-Mean version, use it.
#+begin_src emacs-lisp
  (global-set-key (kbd "M-u") #'upcase-dwim)
  (global-set-key (kbd "M-l") #'downcase-dwim)
  (global-set-key (kbd "M-c") #'capitalize-dwim)
#+end_src
** Add line numbers
Use ~display-line-numbers-mode~ to give line numbers to emacs buffers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
#+end_src
** Delete selection
Replace selected region when typing
#+begin_src emacs-lisp
  (delete-selection-mode 1)
#+end_src
** Blinking cursor
#+begin_src emacs-lisp
  (blink-cursor-mode -1)
#+end_src
** Parenthesis matching
Match parenthesis on every programming mode using ~electric-pair-mode~.
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'electric-pair-mode)
#+end_src
** Mac usability
Working on mac gets very awkward as the option key is used for META
making it unusable for the rest of uses that it has on mac. If for some reason
I am forced to work on a mac again make only command work as the META key.
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq ns-command-modifier 'meta
	  ns-alternate-modifier nil))
#+end_src
** Font configuration
*** Safe set font
The following font serves to set the font without the program crashing
for not finding it
#+begin_src emacs-lisp
  (defun safe-set-font (font-name)
    "If FONT-NAME exists set it to be used in all frames."
    (when (member font-name (font-family-list))
      (set-frame-font font-name t t)))
#+end_src
*** Set font
The font used is hard coded to ~FuraCode~ from Nerd fonts.
#+begin_src emacs-lisp
  (defvar font-name "FuraCode Nerd Font" "Font to be used by Emacs.")
  (safe-set-font font-name)
#+end_src
** Backup configuration
Set ~backup-directory-alist~ variable to prevent backups from being created into
the same directory as the original file and prevent clutter. Configure backup
related variables
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.saves"))
	delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t)
#+end_src
** Miscellaneous configuration
This section of the configuration pertains to small usability configuration
that is not big enough to have its own section on the usability section.
*** Symlinks configuration
Always follow symlinks when opening files
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src
*** Column size
Set the column size to 80 characters
#+begin_src emacs-lisp
  (setq-default fill-column 80)
#+end_src
*** Limit VC
Only use VC for git.
#+begin_src emacs-lisp
  (setq vc-handled-backends '(Git))
#+end_src
*** Enable auto-fill-mode
Enable auto-fill-mode for modes based on text-mode.
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook #'turn-on-auto-fill)
#+end_src
*** Enable auto-revert-mode
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src
** Restart-emacs configuration
Ensure ~restart-emacs~ is installed. Lazy load the command to restart Emacs.
#+begin_src emacs-lisp
  (use-package restart-emacs
    :ensure t
    :commands restart-emacs)
#+end_src
** Theme configuration
Configure a theme and loading without prompting for confirmation.
#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :ensure t
    :config (load-theme 'catppuccin t))
#+end_src
* Utility functions
** Reload configuration
Function used to reload the config file
#+begin_src emacs-lisp
  (defun reload-config ()
    "Reload the configuration file."
    (interactive)
    (load-file user-init-file))
#+end_src
** Open configuration
Make it easier to open the configuration file by just jumping to it with a
command.
#+begin_src emacs-lisp
  (defun open-config ()
    "Jump to the configuration file directly."
    (interactive)
    (find-file literate-config-file))
#+end_src
** Read data file
This function receives a filename and tries to interpret it as a sexp.
#+begin_src emacs-lisp
  (defun read-data-file (filename)
    "Attempt to read FILENAME as a sexp."
    (when (file-exists-p filename)
      (with-current-buffer (find-file-noselect filename)
	(goto-char (point-min))
	(read (current-buffer)))))
#+end_src
* Vanity configuration
This space in the configuration is reserved for functionality that Emacs
shouldn't reasonably have.
** Mail configuration
*** mu4e configuration
Configure ~mu4e~ to support different contexts.
#+begin_src emacs-lisp
  (use-package mu4e
    :init
    (defvar mu4e-bookmarks-file (expand-file-name "mu4e-bookmarks.data" user-emacs-directory)
      "File holding bookmarks to be used in mu4e.")
    (defvar mu4e-contexts-file (expand-file-name "mu4e-contexts.data" user-emacs-directory)
      "File holding contexts to be used in mu4e.
  The sexp held in the file is expected to become a list of mu4e-context objects when calling
  eval on it.")
    :config
    (setq mu4e-get-mail-command "offlineimap"
	  mu4e-update-interval 300
	  mu4e-attachment-dir "~/Downloads"
	  mu4e-view-show-images (display-graphic-p)
	  mu4e-view-prefer-html t
	  mu4e-context-policy 'pick-first
	  mu4e-compose-context-policy nil
	  user-full-name (getenv "REAL_NAME")
	  mail-user-agent #'mu4e-user-agent)
    (when-let* ((bookmarks (read-data-file mu4e-bookmarks-file)))
      (setq mu4e-bookmarks bookmarks))
    (when-let* ((contexts (read-data-file mu4e-contexts-file)))
      (setq mu4e-contexts (eval contexts)))
    :bind (("C-x m" . mu4e)))
#+end_src
*** smtp configuration
Configure ~smtpmail~. The variables indicating which smtp server to used are
assumed to be stored as part of mu4e contexts.
#+begin_src emacs-lisp
  (use-package smtpmail
    :after mu4e
    :config
    (setq smtpmail-stream-type 'starttls
	  smtpmail-smtp-service 587
	  message-kill-buffer-on-exit t
	  message-send-mail-function #'smtpmail-send-it))
#+end_src
** Elfeed configuration
Keeping up to date with internet content like it's the past the century or something.
#+begin_src emacs-lisp
  (use-package elfeed
    :ensure t
    :bind ("C-x w" . elfeed)
    :init
    (defvar elfeed-feeds-file (expand-file-name "elfeed-feeds.data" user-emacs-directory)
      "File holding feeds to be tracked.")
    :config
    (when-let* ((feeds (read-data-file elfeed-feeds-file)))
      (setq elfeed-feeds feeds)))
#+end_src
** Ledger configuration
Handle my finances using Emacs? gimme gimme gimme
#+begin_src emacs-lisp
  (use-package ledger-mode
    :ensure t
    :mode ((rx ".ledger") . ledger-mode))
#+end_src
