* Introduction to awesome JCFFlores Emacs config
The purpose of this emacs config file is to learn more about emacs lisp
and the internals of emacs, as well as to leverage the opportunity to toy
a little bit with literate programming.
* Initial setup
** Package configuration
*** Require package.el before continuing
#+BEGIN_SRC emacs-lisp
(require 'package)
#+END_SRC
*** Add archives
The melpa archive is required to install most packages, the org archive
is required to install org-plus-contrib package later on
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC
*** Initialize packages
This is required for the package initialization to work, for Emacs 27 this
line won't be needed and it's gonna be necessary to check if some reordering
is to be applied to the config
#+BEGIN_SRC emacs-lisp
(package-initialize)
#+END_SRC
** Custom configuration
*** TODO Make this safe to run when a custom.el file doesn't exist
Set the custom-file variable and load it
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC
** Use-package installation
~use-package~ is used throught the config to lazily load and configure
packages, as well as to ensure they are always installed.
*** Conditionally install use-package
The rest of the configuration will not work if ~use-package~ is not available,
the next piece of code ensures it's present.
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC
*** Require use-package
The next line ensures there are no errors/warnings if byte-compiling the config
#+BEGIN_SRC emacs-lisp
(eval-when-compile (require 'use-package))
#+END_SRC
** Required packages
This are packages that come bundled with emacs, for packages downloaded from an
archive ~use-package~ is used.
#+BEGIN_SRC emacs-lisp
(require 'subr-x)
#+END_SRC
* Package configurations
** Markdown configuration
The only reason to have markdown configured is because it's more widespread
than org-mode for markup.
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("README\\.md\\'" . gfm-mode)
	 ("\\.md\\'" . markdown-mode)
	 ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC
* Usability configuration
** Clear screen
Remove menu bar, tool bar and scroll bar to have a clearer editing screen.
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(toggle-scroll-bar -1)
#+END_SRC
** Add line numbers
Use ~display-line-numbers-mode~ to give line numbers to emacs buffers
#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode 1)
#+END_SRC
** Parenthesis matching
Match parenthesis on every programming mode using ~electric-pair-mode~.
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'electric-pair-mode)
#+END_SRC
** Mac usability
Working on mac gets very awkward as the option key is used for META
making it unusable for the rest of uses that it has on mac. If for some reason
I am forced to work on a mac again make only command work as the META key.
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (setq ns-command-modifier 'meta
	ns-alternate-modifier nil))
#+END_SRC
** Font configuration
*** Safe set font
The following font serves to set the font without the program crashing
for not finding it
#+BEGIN_SRC emacs-lisp
(defun safe-set-font (font-name)
  "If the font exists set it to be used in all frames"
  (when (member font-name (font-family-list))
    (set-frame-font font-name t t)))
#+END_SRC
*** Set font
**** TODO Come up with a way to not have the font hard coded
The font used is hardcoded to ~FuraCode~ from Nerd fonts.
#+BEGIN_SRC emacs-lisp
(setq font-name "FuraCode Nerd Font")
(safe-set-font font-name)
#+END_SRC
* Remote client configuration
This configuration is used at work to open local emacs from a remote server
and edit files through tramp.
#+BEGIN_SRC emacs-lisp
(when-let* ((server-key (getenv "SERVER_KEY")))
(setq server-use-tcp t)
(setq server-port 14000)
(setq server-auth-key server-key)
(server-start))
#+END_SRC
